package planit.people.preparation.Entities;

import javax.persistence.*;
import java.util.UUID;

@Entity
@Table(name = "share_preset", uniqueConstraints = {
        @UniqueConstraint(name = "sharedPreset",columnNames = {"invitee_user","inviter_user","shared_preset"})
})
public class Entity_SharePreset {
    /**
     * primary key of the table, it is autogenerated.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "share_preset_seq")
    @SequenceGenerator(name = "share_preset_gen", sequenceName = "share_preset_seq", allocationSize = 1)
    @Column(name = "id_share_entity", nullable = false)
    private Long id_share_entity;
    /**
     * Foreign Key referencing the invitee PlanIt User record
     */
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH, CascadeType.DETACH}, optional = false)
    @JoinColumn(name = "invitee_user", nullable = false)
    private Entity_User invitee_user;
    /**
     * Foreign Key referencing the inviter PlanIt User record
     */
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH, CascadeType.DETACH}, optional = false)
    @JoinColumn(name = "inviter_user", nullable = false)
    private Entity_User inviter_user;
    /**
     * An auto generated unique code that is used to identity SharedPreset record when an action needs to be taken.
     */
    @Column(name = "invite_hash_code", nullable = false, unique = true)
    private UUID invite_hash_code;
    /**
     * Foreign Key referencing the shared EventPreset record
     */
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH, CascadeType.DETACH})
    @JoinColumn(name = "shared_preset")
    private Entity_EventPreset shared_preset;

    public Entity_SharePreset() {

    }

    public Entity_EventPreset getShared_preset() {
        return shared_preset;
    }

    public void setShared_preset(Entity_EventPreset shared_preset) {
        this.shared_preset = shared_preset;
    }

    public Entity_SharePreset(Long id_share_entity, Entity_User invitee_user, Entity_User inviter_user, UUID invite_hash_code, Entity_EventPreset shared_preset) {
        this.id_share_entity = id_share_entity;
        this.invitee_user = invitee_user;
        this.inviter_user = inviter_user;
        this.invite_hash_code = invite_hash_code;
        this.shared_preset = shared_preset;
    }

    public Entity_SharePreset(Entity_User invitee_user, Entity_User inviter_user, Entity_EventPreset shared_preset) {
        this.invitee_user = invitee_user;
        this.inviter_user = inviter_user;
        this.invite_hash_code = UUID.randomUUID();
        this.shared_preset = shared_preset;
    }

    public UUID getInvite_hash_code() {
        return invite_hash_code;
    }

    public void setInvite_hash_code(UUID invite_hash_code) {
        this.invite_hash_code = invite_hash_code;
    }

    public Entity_User getInviter_user() {
        return inviter_user;
    }

    public void setInviter_user(Entity_User inviter_user) {
        this.inviter_user = inviter_user;
    }

    public Entity_User getInvitee_user() {
        return invitee_user;
    }

    public void setInvitee_user(Entity_User invitee_user) {
        this.invitee_user = invitee_user;
    }

    public Long getId_share_entity() {
        return id_share_entity;
    }

    public void setId_share_entity(Long id_share_entity) {
        this.id_share_entity = id_share_entity;
    }

    @Override
    public String toString() {
        return "Entity_SharePreset{" +
                "id_share_entity=" + id_share_entity +
                ", invitee_user=" + invitee_user +
                ", inviter_user=" + inviter_user +
                ", invite_hash_code=" + invite_hash_code +
                ", shared_preset=" + shared_preset +
                '}';
    }
}
