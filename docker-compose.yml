version: "3.8"

services:
  backend-service:
    build:
      context: backend # Use an image built from the specified dockerfile in the `backend` directory.
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on:
      - db # This service depends on postgres db. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5433/people
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend

  frontend-service:
    build:
      context: frontend-react # Use an image built from the specified dockerfile in the `frontend-react` directory.
      dockerfile: Dockerfile
      args:
        REACT_APP_API_BASE_URL: http://backend-service:8080
    ports:
      - "443:443" # Map the exposed port 80 on the container to port 80 on the host machine
    restart: always
    depends_on:
      - backend-service
    networks:
      - frontend
      - backend
    volumes:
      - ./key.pem:/root/ssl/key.pem
      - ./cert.pem:/root/ssl/cert.pem
  db:
    image: postgres:14.1-alpine
    # changed from default 5432 to 5433 to avoid conflicts when testing this docker-compose locally
    ports:
      - "5433:5433"
    command: -p 5433
    expose:
      - "5433" # Publishes 5433 to other containers but NOT to host machine
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=people
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend
  ngrok:
    image: wernight/ngrok:latest
    ports:
      - 4040:4040
    environment:
      NGROK_PROTOCOL: http
      NGROK_PORT: frontend-service:443
      NGROK_AUTH: 1XyeZAbYPN1M9b4X5wv39a4ZqYv_2pELVkSurk88y3RvHh8aN
    depends_on:
      - frontend-service
    networks:
      - frontend
      - backend

# Volumes
volumes:
  db-data:
    driver: local

# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend:
